#include <bits/stdc++.h>

using namespace std;

// 91. 解码方法

// 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

// 'A' -> "1"
// 'B' -> "2"
// ...
// 'Z' -> "26"
// 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

// "AAJF" ，将消息分组为 (1 1 10 6)
// "KJF" ，将消息分组为 (11 10 6)
// 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

// 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。

// 题目数据保证答案肯定是一个 32 位 的整数。

class Solution {
public:
    int numDecodings(string s) {
        int size = s.size();
        vector<int> dp(size+1,0);
        dp[0] = 1;
        for(int i=1;i<=size;++i){
            // 此位可自成一个码
            if(s[i-1]!='0'){
                // 继承前一位的可编码数量
                dp[i] = dp[i-1];
            }
            // 若此位可和前一位结合形成另一个码
            if(i>1){
                int num = s[i-1]-'0'+(s[i-2]-'0')*10;
                if(num>=10&&num<=26){
                    // 继承前前一位的可编码数量
                    dp[i] += dp[i-2];
                }
            }
        }
        return dp[size];
    }
};